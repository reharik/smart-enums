"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addExtensionMethods = void 0;
const types_1 = require("./types");
const addExtensionMethods = (enumItems, extraExtensionMethods) => {
    const extensionMethods = buildExtensionMethods(enumItems);
    let extra = {};
    if (extraExtensionMethods) {
        extra = extraExtensionMethods(enumItems);
    }
    return Object.assign(Object.assign({}, extensionMethods), extra);
};
exports.addExtensionMethods = addExtensionMethods;
const buildExtensionMethods = (rawEnum) => {
    return {
        fromValue: (target) => {
            const item = Object.values(rawEnum).find((value) => value.value === target);
            if (!item) {
                throw new Error(`No enum value found for '${target}'`);
            }
            return item;
        },
        tryFromValue: (target) => {
            if (!target) {
                return undefined;
            }
            return Object.values(rawEnum).find((value) => value.value === target);
        },
        fromKey: (target) => {
            const item = Object.values(rawEnum).find((value) => value.key === target);
            if (!item) {
                throw new Error(`No enum key found for '${target}'`);
            }
            return item;
        },
        tryFromKey: (target) => {
            if (!target) {
                return undefined;
            }
            return Object.values(rawEnum).find((value) => value.key === target);
        },
        tryFromCustomField: (field, target, filter) => {
            if (!target) {
                return undefined;
            }
            return Object.values(rawEnum)
                .filter(filter || (() => true))
                .find((value) => value[field] === target);
        },
        fromDisplay: (target) => {
            const item = Object.values(rawEnum).find((value) => value.display === target);
            if (!item) {
                throw new Error(`No enum display found for '${target}'`);
            }
            return item;
        },
        tryFromDisplay: (target) => {
            if (!target) {
                return undefined;
            }
            return Object.values(rawEnum).find((value) => value.display === target);
        },
        toCustomFieldValues: (field, filter, filterOptions) => {
            return Object.values(rawEnum)
                .filter(x => (filter ? filter(x) : true) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty)
                    ? true
                    : (0, types_1.notEmpty)(x[field])) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
                .map(x => x[field]);
        },
        toOptions: (filter, filterOptions) => {
            return [
                ...(rawEnum || []),
            ]
                .sort((a, b) => ((a === null || a === void 0 ? void 0 : a.index) && (b === null || b === void 0 ? void 0 : b.index) ? ((a === null || a === void 0 ? void 0 : a.index) || 0) - ((b === null || b === void 0 ? void 0 : b.index) || 0) : 0))
                .filter(x => (filter ? filter(x) : true) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
                .map(item => (Object.assign({ label: item.display || item.key, value: item.value }, (item.iconText ? { iconText: item.iconText } : {}))));
        },
        toValues: (filter, filterOptions) => Object.values(rawEnum)
            .filter(x => (filter ? filter(x) : true) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
            .map((item) => item.value),
        toKeys: (filter, filterOptions) => Object.values(rawEnum)
            .filter(x => (filter ? filter(x) : true) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
            .map((item) => item.key),
        toDisplays: (filter, filterOptions) => Object.values(rawEnum)
            .filter(x => (filter ? filter(x) : true) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
            .map((item) => item.display),
        toEnumItems: (filter, filterOptions) => Object.values(rawEnum).filter(x => (filter ? filter(x) : true) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
            ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated)),
        toExtendableObject: (filter, filterOptions) => {
            return Object.values(rawEnum)
                .filter(x => (filter ? filter(x) : true) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showEmpty) ? true : (0, types_1.notEmpty)(x)) &&
                ((filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.showDeprecated) ? true : !x.deprecated))
                .reduce((acc, item) => {
                acc[item.key] = item;
                return acc;
            }, {});
        },
    };
};
//# sourceMappingURL=data:application/json;base64,